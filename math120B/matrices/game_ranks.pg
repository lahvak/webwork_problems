##DESCRIPTION
## DBsubject(Finite Math)
## DBchapter(Matrices)
## DBsection(Ranking)
## Institution(SVSU)
## Author(Jan Hlavacek)
## Level(3)
## KEYWORDS('matrices', 'rankings')
##ENDDESCRIPTION

# File Created: 2021-01-30
# Location: SVSU
# Course: Finite Math

DOCUMENT();

loadMacros(
   "PGstandard.pl",
   "MathObjects.pl",
   "PGML.pl",
   "RserveClient.pl",
);

TEXT(beginproblem());

Context("Numeric");

rserve_eval('library(igraph)');
$functions = <<'FUNCTIONS_END';
is_bidir <- function(G, M, edge){
    head <- head_of(G, edge)
    tail <- tail_of(G, edge)
    return(M[head, tail] == 1)
    }
is_diag <- function(G, M, edge){
    head <- head_of(G, edge)
    tail <- tail_of(G, edge)
    if (head == 1 && tail == 5) return(TRUE)
    if (head == 5 && tail == 1) return(TRUE)
    if (head == 2 && tail == 4) return(TRUE)
    if (head == 4 && tail == 2) return(TRUE)
    return(FALSE)
    }
0
FUNCTIONS_END
rserve_eval($functions);
## Create game matrix: at least 8 games were played, at most 15, and
## everybody won at least once
$create_matrix = <<'CREATE_MATRIX';
repeat {
   M <- matrix(sample(0:1, 25, replace=TRUE), nrow=5, ncol=5)
   for (i in 1:5) {M[i,i] = 0}
   if (sum(M) >= 8 && sum(M) <= 15 && min(rowSums(M)) >= 1) {break}
   }
M
CREATE_MATRIX
@RM = rserve_eval($create_matrix);
$M = Matrix([@RM[0..4]],[@RM[5..9]],[@RM[10..14]],[@RM[15..19]],[@RM[20..24]])->transpose;
$create_m2 = <<'CREATE_MATRIX2';
M2 <- M %*% M
for (i in 1:5) {M2[i,i] = 0}
for (i in 1:25) {
    if (M2[i] != 0) {M2[i] = 1}
    }
M2
CREATE_MATRIX2
@RM2 = rserve_eval($create_m2);
$M2 = Matrix([@RM2[0..4]],[@RM2[5..9]],[@RM2[10..14]],[@RM2[15..19]],[@RM2[20..24]])->transpose;

rserve_eval("G <- graph_from_adjacency_matrix(M)");
$set_curves = <<'SET_CURVES';
for (edge in E(G)) {
    edge_attr(G, "curved", edge) <- ifelse(is_bidir(G,M,edge),0.3,0)
    if (is_diag(G, M, edge)) {edge_attr(G, "curved", edge) <- 0.5}
    }
SET_CURVES
rserve_eval($set_curves);

rserve_eval("L = matrix(c(0, 2, 1, 0, 2, 2, 2, 1, 0, 0), nrow=5, ncol=2)");

$img = rserve_start_plot('png', 500, 500);
rserve_eval("par(bg='transparent')");
rserve_eval("plot(G, layout=L, vertex.color='white', edge.color='black', edge.width=2, margin=.1, vertex.label.cex=1.5)");
$image_path = rserve_finish_plot($img);

$Msum = $M + $M2;

@rowsums = map {$Msum->row($_)->norm_max} 1..5;

$game = list_random("chess", "go", "tiddlywinks", "Battleship", "checkers", "Shogi", "tik-tak-toe", "gorodki", "reversi", "backgammon", "piquet", "cribbage", "ping-pong", "tennis", "tetherball", "wrestling", "thumb wrestling", "mancala");

BEGIN_PGML

The [$game] season has been interrupted by a global pandemic before all games could be played.  The coach of a five member [$game] team has to rank the players using the incomplete data.  The following diagram shows all the games that has been played.  An arrow from a circle numbered [`i`] to a circle numbered [`j`] means that player [`i`] has defeated player [`j`].

[@ image($image_path, width=>500, height=>500) @]*

Using this diagram:

1.  Construct the matrix [`A`] with elements

    [```a_{ij} = \begin{cases}1 & \text{ if $i$ defeated $j$}\\0 & \text{otherwise}\end{cases}```]

    [`A`] = [__]*{$M}

2.  Construct the matrix [`B`] with elements

    [```b_{ij} = \begin{cases}1 & \text{ if $i$ defeated someone who defeated $j$ and $i \neq j$}\\0 & \text{otherwise}\end{cases}```]

    [`B`] = [__]*{$M2}

3.  The _rank_ of player [`i`] is the sum of the [`i`]-th row of the matrix [`A + B`]:

    * Player 1 rank: [______]{$rowsums[0]} 
    * Player 2 rank: [______]{$rowsums[1]}
    * Player 3 rank: [______]{$rowsums[2]}
    * Player 4 rank: [______]{$rowsums[3]}
    * Player 5 rank: [______]{$rowsums[4]}

END_PGML

ENDDOCUMENT();
