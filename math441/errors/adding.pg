# DESCRIPTION
# Calculate absolute and relative error
# written by Jan Hlavacek (jhlavace@svsu.edu)
# ENDDESCRIPTION

## DBsubject('Numerical Analysis')
## DBchapter('Errors')
## DBsection('Absolute and relative errors')
## KEYWORDS('error, approximation')
## TitleText1()
## EditionText1()
## AuthorText1()
## Section1()
## Problem1()
## Author('Jan Hlavacek')
## Institution('SVSU')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGML.pl",
"answerHints.pl",
"PGcourse.pl",
);
Context("Numeric");
Context()->{format}{number} = "%.8f#";

# Define variables here:

# Make both numbers have 8 significant digits:
$araw = random(10**6,(8*10**6)-1,1)*10 + random(1,9,1); # 8 digits, LSD != 0, MSD < 8
$b = random(10**6,(10**7)-1,1)*10 + random(1,9,1); # 8 digits, LSD != 0

$shift = random(2,3);
$a = $araw*(10**$shift); # between 10 and 11 digits

$sum = $a + $b; # between 10 and 11 digits

# precision between 4 and 6 digits
$prec = $shift + random(2,3);

# Chop a and b to precision
$adigs = 8 + $shift;
$adrops = $adigs - $prec;
$fla = $a - $a % (10**$adrops);

$bdrops = 8 - $prec;
$flb = $b - $b % (10**$bdrops);

# mantissas of a and b
$amant = $fla/(10**$adrops);
$bmant = $flb/(10**$bdrops);

# Calculate the sum of floats and chop it to precision
$sumfls = $fla + $flb;  # flsum will have the same number of digits as a
$flsum = $sumfls - $sumfls % (10**$adrops);

# Mantissa of sum
$summant = $flsum/(10**$adrops);

$amant_cmp = Compute($amant)->cmp(tolType => 'absolute', tolerance => 0.00000001)->withPostFilter(
    AnswerHints(Compute("$amant + 1") => "Are you using rounding instead of chopping?"));
$bmant_cmp = Compute($bmant)->cmp(tolType => 'absolute', tolerance => 0.00000001)->withPostFilter(
    AnswerHints(Compute("$bmant + 1") => "Are you using rounding instead of chopping?"));
$summant_cmp = Compute($summant)->cmp(tolType => 'absolute', tolerance => 0.000000001)->withPostFilter(
    AnswerHints(Compute("$summant + 1") => "Are you using rounding instead of chopping?"));

$error = $sum - $flsum;

$relerror = Compute("$error/$sum");
$relerrorans = $relerror->cmp(tolType => 'relative', tolerance => 0.01);

# number of decimals in a and b
$decb = random(4,6);
$deca = $decb - $shift;

$abserror = Compute($error*10**(-$decb));
$abserrorans = $abserror->cmp(tolType => 'absolute', tolerance => 0.00001);

# Exponents
$expa = 8 - $deca;
$expb = 8 - $decb;
$expsum = $expa;

# Integer and decimal parts of a and b:
$adec = $araw % (10**$deca);
$aint = ($araw - $adec)/(10**$deca);
$adecstr = sprintf "%0${deca}u", $adec;
$bdec = $b % (10**$decb);
$bint = ($b - $bdec)/(10**$decb);
$bdecstr = sprintf "%0${decb}u", $bdec;


# Integer and decimal part of sum
$sumdec = $sum % (10**$decb);
$sumint = ($sum - $sumdec)/(10**$decb);
$sumdecstr = sprintf "%0${decb}u", $sumdec;

# Integer and decimal parts of fla and flb:
$fladec = $fla % (10**$decb);
$flaint = ($fla - $fladec)/(10**$decb);

if($fladec == 0){
    $fladecstr = "";
} else {
    $decfla = $decb;
    while ($fladec % 10 == 0) { # remove trailing zeros
        $fladec /= 10;
        $decfla -= 1;
    }
    $fladecstr = sprintf ".%0${decfla}u", $fladec;
}

$flbdec = $flb % (10**$decb);
$flbint = ($flb - $flbdec)/(10**$decb);

if($flbdec == 0){
    $flbdecstr = "";
} else {
    $decflb = $decb;
    while ($flbdec % 10 == 0) { # remove trailing zeros
        $flbdec /= 10;
        $decflb -= 1;
    }
    $flbdecstr = sprintf ".%0${decflb}u", $flbdec;
}

# Integer and decimal parts of sumfls
$sfldec = $sumfls % (10**$decb);
$sflint = ($sumfls - $sfldec)/(10**$decb);

if($sfldec == 0){
    $sfldecstr = "";
} else {
    $decsfl = $decb;
    while ($sfldec % 10 == 0) { # remove trailing zeros
        $sfldec /= 10;
        $decsfl -= 1;
    }
    $sfldecstr = sprintf ".%0${decsfl}u", $sfldec;
}

# Integer and decimal parts of flsum
$flsdec = $flsum % (10**$decb);
$flsint = ($flsum - $flsdec)/(10**$decb);

if($flsdec == 0){
    $flsdecstr = "";
} else {
    $decfls = $decb;
    while ($flsdec % 10 == 0) { # remove trailing zeros
        $flsdec /= 10;
        $decfls -= 1;
    }
    $flsdecstr = sprintf ".%0${decfls}u", $flsdec;
}


# Actual problem goes here:
TEXT(beginproblem());
BEGIN_PGML
In this problem you will do your calculation *using [$prec] digit arithmetic with _chopping_*.

Given numbers [`a = [$aint].[$adecstr]`] and [`b = [$bint].[$bdecstr]`]:

1.  Enter [`\operatorname{fl}(a)`]: [`0.`][______]{$amant_cmp}[`\times 10`]^[_______]{$expa}
1.  Enter [`\operatorname{fl}(b)`]: [`0.`][______]{$bmant_cmp}[`\times 10`]^[_______]{$expb}
1.  Enter [`\operatorname{fl}\left(\operatorname{fl}(a) + \operatorname{fl}(b)\right)`]: [`0.`][______]{$summant_cmp}[`\times 10`]^[_______]{$expsum}

Then calculate the errors when approximating [`a + b`] by [`\operatorname{fl}\left(\operatorname{fl}(a) + \operatorname{fl}(b)\right)`].
Calculate the errors using regular arithmetic.  Enter the _exact value_ for the absolute error.  Enter the relative error with at least 3 significant figures.

*   Absolute error: [_____________]{$abserrorans}
*   Relative error: [_____________]{$relerrorans}
END_PGML

BEGIN_PGML_SOLUTION
The floating point representation of [`a = [$aint].[$adecstr]`] in [$prec] digit arithmetic with chopping is
[`\operatorname{fl}(a) = [$flaint][$fladecstr]`]. The normal representation of this is [`0.[$amant]\times 10^{[$expa]}`].

The floating point representation of [`b = [$bint].[$bdecstr]`] in [$prec] digit arithmetic with chopping is
[`\operatorname{fl}(b) = [$flbint][$flbdecstr]`]. The normal representation of this is [`0.[$bmant]\times 10^{[$expb]}`].

The sum [`\operatorname{fl}(a) + \operatorname{fl}(b)`] is [`[$sflint][$sfldecstr]`].  The floating point representation of that is
[```\operatorname{fl}\left(\operatorname{fl}(a) + \operatorname{fl}(b)\right) = [$flsint][$flsdecstr] = 0.[$summant]\times 10^{[$expsum]}```]

The _absolute error_ is 
[`\left\lvert (a + b) - \operatorname{fl}\left(\operatorname{fl}(a) + \operatorname{fl}(b)\right)\right\rvert`]
which is
[`\left\lvert [$sumint].[$sumdecstr] - [$flsint][$flsdecstr]\right\rvert = [$abserror]`].

The _relative error_ is
[```\left\lvert \frac{(a + b) - \operatorname{fl}\left(\operatorname{fl}(a) + \operatorname{fl}(b)\right)}{a+b}\right\rvert = [$relerror]```]

END_PGML_SOLUTION
ENDDOCUMENT();
