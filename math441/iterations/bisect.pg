##DESCRIPTION
## DBsubject(Numerical Analysis)
## DBchapter(Iterative Methods)
## DBsection(Bisection)
## Institution(SVSU)
## Author(Jan Hlavacek)
## Level(3)
## KEYWORDS('iterative methods, bisection')
##ENDDESCRIPTION

# File Created: 2021-02-21
# Location: SVSU
# Course: Numerical Analysis

DOCUMENT();     
loadMacros("PGstandard.pl",  
           "PGauxiliaryFunctions.pl",
           "MathObjects.pl",
           "PGML.pl",
           "scaffold.pl",
);
TEXT(&beginproblem);
$showPartialCorrectAnswers = 1;

Context("Numeric");

$sign_factor = list_random(-1,1);

$a = random(-4,4,.1);
$length = random(2,8,2);
$b = $a + $length;

$levels = 3;
$partitions = 2**($levels + 1);
$sol_part = random(1, $partitions - 1, 2);
$solution = $a + $sol_part*$length/$partitions;

sub perturb {
    my $y = shift(@_);
    my $factor = random(.7, 1.5, .001);

    return $y*$factor;
}

@as = ();
@bs = ();
@ps = ();
@fs = ();

$currenta = $a;
$currentb = $b;

for(my $i = 0; $i < $levels; $i++){
    $currentp = 1*sprintf("%.3f", $currenta + ($currentb - $currenta)/2);
    push(@as, $currenta);
    push(@bs, $currentb);
    push(@ps, $currentp);
    push(@fs, $sign_factor*perturb($currentp - $solution));
    if ($currentp < $solution) {
        $currenta = $currentp;
    } else {
        $currentb = $currentp;
    }
}

$fa = $sign_factor*perturb($a - $solution);
$fb = $sign_factor*perturb($b - $solution);

Scaffold::Begin();
Section::Begin("Step 1");

BEGIN_PGML
In this problem you will perform [$levels] steps of the _bisection method_ to find the solution of the equation
[```f(x) = 0```]
on the interval [`[[$a],[$b]]`]. To start, the following is given:

*   [`f(a) = [$fa]`]
*   [`f(b) = [$fb]`]

The first approximation of the solution will be [`p = `][_________]{$ps[0]}. *Round to 3 decimal places when necessary.*
END_PGML
Section::End();

Section::Begin("Step 2");
BEGIN_PGML
You are right, the first approximation will be [`p = [$ps[0]]`].  Pluggin this into the function [`f`] will give you

*   [`f(p) = [$fs[0]]`]

Find the next values of [`a`], [`b`] and [`p`] (round to 3 decimal places when necessary):

*   [`a = `][________]{$as[1]}
*   [`b = `][________]{$bs[1]}
*   [`p = `][________]{$ps[1]}

END_PGML
Section::End();

Section::Begin("Step 3");
BEGIN_PGML
You are right, the second approximation will be [`p = [$ps[1]]`].  Pluggin this into the function [`f`] will give you

*   [`f(p) = [$fs[1]]`]

Find the next values of [`a`], [`b`] and [`p`] (round to 3 decimal places when necessary):

*   [`a = `][________]{$as[2]}
*   [`b = `][________]{$bs[2]}
*   [`p = `][________]{$ps[2]}

END_PGML
Section::End();
Scaffold::End();
ENDDOCUMENT();
