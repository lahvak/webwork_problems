##DESCRIPTION
##  Parametric equations
##ENDDESCRIPTION


## DBsubject(Calculus - single variable)
## DBchapter(Parametric)
## DBsection(Curves)
## Date(2020-12-13)
## Institution(SVSU)
## Author(Jan Hlavacek)
## Level(2)
## KEYWORDS('Parametric Equations')


DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGunion.pl",
  "MathObjects.pl",
  "imageChoice.pl",
  "PGgraphmacros.pl",
  "PGgraders.pl",
  "PGcourse.pl"
);

$refreshCachedImages=1;

############################################
#  Setup

$size = [250,250];   # the size of the images
$tsize = 450;        # tex size of the images


Context("Numeric")->variables->are(x=>"Real",y=>"Real",t=>"Real");

## Curve 0: circle
$r = random(2.5, 4.5, .1);
$x[0] = Formula("$r*sin(t)");
$y[0] = Formula("$r*cos(t)");
$domainS[0] = -pi;
$domainE[0] = pi;

## Curve 1: ellipse
$axis = random(1,3,.1);
$select1 = list_random(0,1);
($a, $b) = $select ? ($axis, 4) : (4, $axis);
$x[1] = Formula("$a*sin(t)");
$y[1] = Formula("$b*cos(t)");
$domainS[1] = -pi;
$domainE[1] = pi;

## Curve 2: slanted line, large slope
$startx2 = random(-2,2);
$starty2 = list_random(-1,1)*random(2,4);
$vx2 = list_random(-1,1)*random(1,2);
$vy2 = ($starty2 > 0 ? -1 : 1)*random(4,6);
$x[2] = Formula("$startx2 + $vx2*t")->reduce;
$y[2] = Formula("$starty2 + $vy2*t")->reduce;
$domainS[2] = -2.5;
$domainE[2] = 2.5;

## Curve 3: slanted line, small slope
$startx3 = list_random(-1,1)*random(2,4);
$starty3 = random(-2,2);
$vx3 = ($startx3 > 0 ? -1 : 1)*random(4,6);
$vy3 = list_random(-1,1)*random(1,2);
$x[3] = Formula("$startx3 + $vx3*t")->reduce;
$y[3] = Formula("$starty3 + $vy3*t")->reduce;
$domainS[3] = -2.5;
$domainE[3] = 2.5;

## Curve 4: vertical parabola
$dir4 = list_random(-1,1);
$shift4 = $dir4*random(-4,1);
$x[4] = Formula("2*t")->reduce;
$y[4] = Formula("$dir4*$t^2 + $shift4")->reduce;
$domainS[4] = -3;
$domainE[4] = 3;

## Curve 5: horizontal parabola
$dir4 = list_random(-1,1);
$shift4 = $dir4*random(-4,1);
$x[4] = Formula("$dir4*$t^2 + $shift4")->reduce;
$y[4] = Formula("2*t")->reduce;
$domainS[4] = -3;
$domainE[4] = 3;

foreach my $i (0..5) {
  $gr[$i] = init_graph(-5,-5,5,5,axes=>[0,0],pixels=>[400,400]);
  $gr[$i]->lb('reset');
  $gr[$i]->lb( new Label(4.7,0.2,'x','black','center','middle','large'));
  $gr[$i]->lb( new Label(0.2,4.7,'y','black','center','middle','large'));
  $xfunc[$i] = $x[$i]->perlFunction;
  $yfunc[$i] = $y[$i]->perlFunction;
  $fn[$i] = new Fun($xfunc[$i], $yfunc[$i], $gr[$i]);
  $fn[$i]->domain($domainS[$i], $domainE[$i]);
}

#  Array of graphs

Context()->texStrings;

sub paramstr {
    $x = $_[0];
    $y = $_[1];

    return "\(\displaystyle\left\{\begin{aligned}x &= $x\\y &= $y\end{aligned}\right.\)";
}

@QA = (
paramstr($x[0],$y[0]), $gr[0], 
paramstr($x[1],$y[1]), $gr[1], 
paramstr($x[2],$y[2]), $gr[2], 
paramstr($x[3],$y[3]), $gr[3], 
paramstr($x[4],$y[4]), $gr[4], 
paramstr($x[5],$y[5]), $gr[5], 
);

$ml = new_image_match_list(
  link => 1,                #  link to separate image
  size => $size,            #  image size in pixels
  tex_size => $tsize,       #  tex size in precent times 10
  columns => 2,             #  number of columns
);

$ml->{separation} = 5;      # separation for questions in the list

$ml->rf_print_q(~~&pop_up_list_print_q); # use pop-up-lists
$ml -> ra_pop_up_list([ No_answer=>"?", A=>"A", B=>"B", C=>"C", D=>"D", E=>"E", F=>"F" ] );

$ml->qa(@QA);
$ml->choose(6);

###############################################
#  Main text

TEXT(beginproblem());

BEGIN_TEXT
\{
ColumnTable(
"Match the parametric equations with the graphs labeled A - F".
$BR.
$BR.
$ml->print_q,
$BCENTER.
$ml->print_a.
$BR.
"(Click on a graph to enlarge it.)".
$ECENTER,
indent=>"0", separation=>"30", valign=>"TOP"
);
\}
END_TEXT

###############################################
# Answer evaluation

install_problem_grader(~~&custom_problem_grader_fluid);
$ENV{'grader_numright'} = [2,4];
$ENV{'grader_scores'} = [0.5,1];
$ENV{'grader_message'} = "You can earn " .
"50% partial credit for 2 - 3 correct answers.";

$showPartialCorrectAnswers = 0;

ANS(str_cmp($ml->ra_correct_ans));

ENDDOCUMENT();
